矩阵类 Matrix: 矩阵按矩阵整体进行操作
数组类 Array : 数组类对矩阵内每一个元素进行操作

矩阵/数组的创建
Matrix<数据类型, 行数, 列数>
Array<数据类型, 行数, 列数>
# 动态矩阵大小，行和列为 Dynamic

    Eigen::Matrix3f mat_33f;    //3X3大小的方阵，数据类型为float
    Eigen::Matrix4i mat_44i;    //4X4大小的方阵，数据类型为int
    Eigen::Vector3f mat_31f;    //3X1大小的列向量
    Eigen::RowVector3i mat_13i; //1X3大小的行向量
 
 创建数组列向量
 
 矩阵类和数组类可以相互转换
 浮点数运算选用double
 
 矩阵/数组的初始化赋值
 
 初始化: 创建变量是赋予其一个初始值
 赋值: 把对象的当前值擦除，然后用一个新的值替代
 
 C++11之前的版本
 对于动态矩阵，()中表示的是矩阵的尺寸
 
 矩阵/数组的高级初始化
 1.逗号的使用
 2.特殊矩阵的初始化
 	零矩阵，单位矩阵，随机数矩阵，元素全为1的矩阵
 	对于矩阵大小确定的，括号中可省略
 	对于动态大小矩阵，括号中要规定矩阵尺寸
 	
 	Constant函数
 	构建一个所有元素均相同的常数矩阵
 	对于矩阵大小确定的，括号中的是填充的数字
 	对于矩阵大小不确定的，括号中前面一位或两位定义矩阵尺寸，最后一位定义元素
 	
 	LinSpaced函数
 	构建一个线性间隔向量
 	1.只能用于向量、一维数组
 	2.需要所分区间的上下限
 3.临时对象的使用
 	
 
动态矩阵/数组
方法1：构建长数组
方法2：new动态分配存储空间
方法3：vector声明动态数组
	// Eigen::Matrix<typename Scalar, Dynamic, Dynamic>
    	// Eigen::Array<typename Scalar, Dynamic, Dynamic>
 	初始化方法
 	赋值前定义矩阵的尺寸
 	注意：
 		1.数据类型只能是整形
 		2.定义矩阵时，行数和列数必须是确定的
 		3.初始化的行数和列数对应
 		4.更改行数和列数后，配合使用resize()
 	
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
